#+startup: overview
#+title: Table of Contents

+ Preface
# whose this book is for?
# someone who has a base understanding of programming concepts

* PART I: PLAYING WITH DART
** CHAPTER TREE: DART ANATOMY

*** HOW TO TALK DART LANGUAGE
*** LITERALLY EVERYTHING'S OBJECT
# everything is object in dart even functions

** CHAPTER FOUR: CONTROLLING THE FLOW
# Statements & Expressions
# controlling the flow
# conditionals
# if else
# loops
# for loop
# while loop
# do while loop
# for in loop
# switch statement
# break and continue

** Chapter FIVE: REPRESENTING & OPERATING ON DATA
# everything is an object
# classes
# creating objects
# default constructor
# inheritance
# extends keyword
# super keyword
# polymorphism
# static polymorphism
# dynamic polymorphism
# encapsulation
# abstract classes and methods
# interfaces
# callable classes
# accessors
# getters and setters
# noSuchMethod
# constant objects and fields
# metaclass
# finals
# identity and equality
# defining variables
# constants & finals?
# var
# operators
# operators precedence
# spread operator
# collection, lists, etc

*** private member class
*** Metadata
*** all kinds of object constructors
**** generative constructor
**** constructor with optional parameters
**** named constructors
**** syntactic sugar
**** redirecting constructors
**** private constructors
**** factory constructors
**** constant constructors
*** mixins
*** Type System
**** type checking
**** type conversion
**** null safety
**** type test - is keyword
**** casting
**** static type
*** Functions
**** functions as objects
**** closures
**** function types
**** named and optional parameters
**** anonymous functions and arrow syntax
*** data types
**** type inference
**** var keyword
**** collections
***** collection if
***** collection for
**** iterators

** CHAPTER SIX: PACKAGING
*** generic
**** generic functions
**** generic collection
**** CHAPTER TEN: Dart API
***** dart:core
***** dart:math
***** dart:io
****** file handling
***** dart:async
***** dart:convert
***** dart:html
***** dart:svg
***** dart:web_audio
***** dart:ui
***** dart:mirrors
****** reflection
***** lists
***** maps
***** sets

*** packages
**** creating and publishing a package
**** pub tool

** CHAPTER SEVEN: CONCURRENCY
*** Concurrency
**** future
**** zones
**** async and await keywords
**** streams
*** Meta Programming
**** code generation
*** extensions
*** internationalization
*** Exception Handling
**** finally
**** try catch
**** rethrow
**** stack traces
**** custom exception
**** asynchronous error handling

** CHAPTER EIGHT: EMBEDDING DART EVERYWHERE
# dart and HTML
# calling dart from JavaScript
# dart and JavaScript inter operation

* PART II: STRUCTURING DATA USING DART
** Chapter Ten: Tree
** Chapter Eleven: Heap

* PART III: DESIGN PATTERNS IN DART
* PART IV: ONCE UPON A TIME, DART
** CHAPTER ONE: WORLD BEFORE DART WAS BORN
# what problems were in the technology before dart
# no naming dart in this chapter
# dart comes to answer JavaScript's shortcomings

** CHAPTER TWO: LET THERE BE DART
# why someone ends up with dart
# a little bit of history
# Dart wants to target everything
# dart first want to target web but now everything
# dart design principles
# how dart executes a program
# overview of the whole Dart language
# aot compiler vs jit compiler
# dart cons and pros
# dart future
# dart is known by flutter framework
# what sb should want to end up with dart? dart answer to what questions
# how dart render gui and use native API
# how dart executes programs

* APPENDICES
** APPENDIX I: SETTING ENVIRONMENTS UP
# setting up multiple IDEs

** APPENDIX II: DEBUGGING & TRACING
# how to debug
# how to trace
